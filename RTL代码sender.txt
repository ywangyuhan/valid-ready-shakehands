module sender(input clk,
              input rst_n,
              input[31:0] data,
              input ready,
              input en,
              output reg valid,
              output reg[31:0] sdata);

   reg ready1;
   reg ready2;
   reg ready3;
   always@(posedge clk or negedge rst_n)
      begin
         if(!rst_n) begin
            ready1<=1'b0;
            ready2<=1'b0;
            ready3<=1'b0;
         end
         else begin
            ready1<=ready;
            ready2<=ready1;
            ready3<=ready2;
         end
      end

   wire pulse_ready;
   assign pulse_ready=ready2&&(~ready3);

   always@(posedge clk or negedge rst_n)
      begin
         if(!rst_n)           valid<=1'b0;
         else if(en)          valid<=1'b1;
         else if(pulse_ready) valid<=1'b0;
      end

   always@(posedge clk or negedge rst_n)
      begin
         if(!rst_n)           sdata<='d0;
         else if(en)          sdata<=data;
      end

endmodule